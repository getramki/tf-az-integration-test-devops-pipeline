# Azure Pipeline that run basic continuous integration on a Terraform project

# This makes sure the pipeline is triggered every time code is pushed in the validation-testing example source, on all branches.
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - 'src/*'

parameters:
  - name: Action
    displayName: Action
    type: string
    default: 'Destroy'
    values:
    - Plan
    - Apply
    - Destroy

variables:
  # There must be an Azure Service Connection with that name defined in your Azure DevOps settings. See https://docs.microsoft.com/en-us/azure/devops/pipelines/library/connect-to-azure?view=azure-devops
  serviceConnection: 'terraform-basic-testing-azure-connection'
  azureLocation: 'eastus'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/src'
  terraformVersion: '0.12.25'
  action: ${{ parameters.Action }}
stages:
  - stage: TerraformContinuousIntegration
    condition: ne('${{ parameters.Action }}', 'Destroy')
    displayName: Terraform Module - CI
    jobs:
    - job: TerraformContinuousIntegrationJob
      displayName: TerraformContinuousIntegration - CI Job
      pool:
        vmImage: ubuntu-20.04
      steps:
      # Step 1: run the Checkov Static Code Analysis
      - bash: $(terraformWorkingDirectory)/checkov.sh $(terraformWorkingDirectory)
        displayName: Checkov Static Code Analysis
      # Step 2: install Terraform on the Azure Pipelines agent
      - task: TerraformInstaller@1
        displayName: Install Terraform on the Agent
        inputs:
          terraformVersion: 'latest'
      # Step 3: Terraform init - install providers
      - task: TerraformTaskV4@4
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(terraformWorkingDirectory)'
          backendServiceArm: 'Visual Studio Enterprise Subscription(115d702d-6968-41b1-be25-0470b8242967)'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'terraformstate6'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'integration-demo/integration-test.tfstate'
      # Step 4: Validate the terraform code
      - task: TerraformTaskV4@4
        displayName: Terraform Validate
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(terraformWorkingDirectory)'
      # Step 5: Plan the deployment
      - task: TerraformTaskV4@4
        displayName: Terraform Plan
        condition: and(succeeded(), eq(variables['Action'], 'Plan'))
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: 'Visual Studio Enterprise Subscription(115d702d-6968-41b1-be25-0470b8242967)'
      # Step 6: Apply - deploy the resources
      - task: TerraformTaskV4@4
        displayName: Terraform Apply
        condition: and(succeeded(), eq(variables['Action'], 'Apply'))
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(terraformWorkingDirectory)'
          commandOptions: '-auto-approve'
          environmentServiceNameAzureRM: 'Visual Studio Enterprise Subscription(115d702d-6968-41b1-be25-0470b8242967)'
  - stage: terraform_destroy
    condition: contains('${{ parameters.Action }}', 'Destroy')
    jobs:
      - job: terraform_destroy
        steps:
          - task: TerraformTaskV4@4
            displayName: Terraform Init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(terraformWorkingDirectory)'
              backendServiceArm: 'Visual Studio Enterprise Subscription(115d702d-6968-41b1-be25-0470b8242967)'
              backendAzureRmResourceGroupName: 'terraform-storage-rg'
              backendAzureRmStorageAccountName: 'terraformstate6'
              backendAzureRmContainerName: 'tfstatefiles'
              backendAzureRmKey: 'integration-demo/integration-test.tfstate'
          - task: TerraformTaskV4@4
            displayName: 'destroy'
            condition: and(succeeded(), eq(variables['action'], 'Destroy'))
            inputs:
              provider: 'azurerm'
              command: 'destroy'
              commandOptions: '-auto-approve'
              environmentServiceNameAzureRM: 'Visual Studio Enterprise Subscription(115d702d-6968-41b1-be25-0470b8242967)'
              workingDirectory: '$(terraformWorkingDirectory)'